diff --git a/Adafruit_CharLCD/Adafruit_CharLCD.py b/Adafruit_CharLCD/Adafruit_CharLCD.py
index 9a1351d..55b088b 100755
--- a/Adafruit_CharLCD/Adafruit_CharLCD.py
+++ b/Adafruit_CharLCD/Adafruit_CharLCD.py
@@ -92,9 +92,13 @@ class Adafruit_CharLCD(object):
     def __init__(self, rs, en, d4, d5, d6, d7, cols, lines, backlight=None,
                     invert_polarity=True,
                     enable_pwm=False,
-                    gpio=GPIO.get_platform_gpio(),
-                    pwm=PWM.get_platform_pwm(),
+                    gpio=None,
+                    pwm=None,
                     initial_backlight=1.0):
+        if gpio is None:
+            gpio = GPIO.get_platform_gpio()
+        if (backlight is not None or enable_pwm) and pwm is None:
+            pwm = PWM.get_platform_pwm()
         """Initialize the LCD.  RS, EN, and D4...D7 parameters should be the pins
         connected to the LCD RS, clock enable, and data line 4 through 7 connections.
         The LCD will be used in its 4-bit mode so these 6 lines are the only ones
@@ -322,11 +326,15 @@ class Adafruit_RGBCharLCD(Adafruit_CharLCD):
     an RGB backlight."""
 
     def __init__(self, rs, en, d4, d5, d6, d7, cols, lines, red, green, blue,
-                 gpio=GPIO.get_platform_gpio(), 
+                 gpio=None,
                  invert_polarity=True,
                  enable_pwm=False,
-                 pwm=PWM.get_platform_pwm(),
+                 pwm=None,
                  initial_color=(1.0, 1.0, 1.0)):
+        if gpio is None:
+            gpio = GPIO.get_platform_gpio()
+        if enable_pwn and pwm is None:
+            pwm = PWM.get_platform_pwm()
         """Initialize the LCD with RGB backlight.  RS, EN, and D4...D7 parameters 
         should be the pins connected to the LCD RS, clock enable, and data line 
         4 through 7 connections. The LCD will be used in its 4-bit mode so these 
@@ -422,7 +430,9 @@ class Adafruit_CharLCDPlate(Adafruit_RGBCharLCD):
     """Class to represent and interact with an Adafruit Raspberry Pi character
     LCD plate."""
 
-    def __init__(self, address=0x20, busnum=I2C.get_default_bus(), cols=16, lines=2):
+    def __init__(self, address=0x20, busnum=None, cols=16, lines=2):
+        if busnum is None:
+            busnum = I2C.get_default_bus()
         """Initialize the character LCD plate.  Can optionally specify a separate
         I2C address or bus number, but the defaults should suffice for most needs.
         Can also optionally specify the number of columns and lines on the LCD
